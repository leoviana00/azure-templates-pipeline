stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: 'Build'
    steps:
    - checkout: self
    - checkout: helmrepo
    - task: Docker@2
      displayName: dockerLogin
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnectionName)
    - task: Docker@2
      displayName: dockerBuild
      inputs:
        repository: $(imageName)
        command: build
        Dockerfile: $(dockerfile)
        tags: |
          $(imageTag)
    - task: HelmInstaller@1
      displayName: "install helm"
      inputs:
        helmVersionToInstall: $(helmVersion)
    - script: |
        echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
        helm chart save $(helm package --app-version $(imageTag) --version $(helmChartVersion) ./$(chartHelmFile) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName)
        helm chart push $(registryName).azurecr.io/charts/$(projectName):$(helmChartVersion)
        echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: "helm package"
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(helmfrom)
        targetFolder: $(helmto)
    - publish: $(build.artifactStagingDirectory)
      artifact: build-artifact

- stage: Deploy
  displayName: 'Deploy AKS'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job:
    steps:
    - task: HelmInstaller@1
      displayName: 'install helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    - download: ci-pipeline
      artifact: build-artifact

  - deployment: dev
    displayName: 'Deploy job'
    environment: development-$(projectName)
    variables:
    - group: aks-variable-group
    - bash: |
        az login --service-principal -u $(aksSpId) -p '$(aksSpSecret)' --tenant $(aksSpTenantId)
        az aks get-credentials -n $(aks) -g $(rg)
        echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
        helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/ci-pipeline/build-artifact/variables.json -r)
        helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
        helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
        helm upgrade \
          --namespace $(k8sNamespace) \
          --create-namespace \
          --install \
          --wait \
          --version $helmChartVersion \
          --set image.repository=$(registryServerName)/$(projectName) \
          --set ingress.enabled=false \
          $(projectName) \
          $(pipeline.workspace)/install/$(projectName)
      # failOnStderr: true
      displayName: 'deploy helm chart'