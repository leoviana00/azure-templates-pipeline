stages:

# ---------------------------------------------------------------------------
#                           BUILD AND PUSH
# ---------------------------------------------------------------------------

- stage: Build
  displayName: 'Build and Push'
  jobs:
  - job: 'Build'
    steps:
    - checkout: self
    - checkout: helmrepo

    # Build with maven
    - task: Maven@3
      displayName: BuildMaven
      inputs:
        mavenPomFile: '$(projectName)/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean package -DskipTests=true'

    # Build and push with docker
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageName)
        dockerfile: $(dockerfile)
        containerRegistry: $(dockerRegistryServiceConnectionName)
        tags: |
          $(imageTag)

    # Helm installer
    - task: HelmInstaller@1
      displayName: 'Install Helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    
    # Helm chart save and push
    - script: |
        echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
        helm chart save $(helm package --app-version $(imageTag) --version $(helmChartVersion) ./$(chartHelmFile) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName)
        helm chart push $(registryName).azurecr.io/charts/$(projectName):$(helmChartVersion)
        echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: 'Helm Package'

    # Copy files
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(helmfrom)
        targetFolder: $(helmto)

    # Publish artifact    
    - publish: $(build.artifactStagingDirectory)
      artifact: build-artifact

# ---------------------------------------------------------------------------
#                           Deployment DEV
# ---------------------------------------------------------------------------

- stage: Dev
  displayName: deploy to dev
  # Dependência do build com sucesso para rodar
  dependsOn: ['Build']
  # Condição para ser startado
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: dev
    displayName: Deploy to aks dev
    environment: Deploy_Dev
    strategy:
      runOnce:
        deploy:
          steps:   
            # Helm Installer
            - task: HelmInstaller@1
              displayName: 'Install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            # Helm chart pull and export
            - bash: |
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
              displayName: 'Helm Pull and Export'

            # Helm Deploy
            - task: HelmDeploy@0
              displayName: Deploy chart to aks
              inputs:
                connectionType: 'Azure Resource Manager' #Criar um serviço de conexão do tipo Resource Manager
                azureSubscription: 'aks-connection-cluster-prod' # Nome da conexão de serviço criada
                azureResourceGroup: 'rg-br-infra-cluster-prod' # Nome do Resource Group
                kubernetesCluster: 'aks-prod' # Nome do aks
                namespace: '$(k8sNamespace)' # Passando o namespace
                command: 'upgrade' # Ação a ser tomada
                chartType: 'FilePath' 
                chartPath: '$(pipeline.workspace)/install/$(projectName)/' # LOcal para onde o chart foi exportado
                releaseName: '$(projectName)' # Nome da release
                arguments: '--create-namespace --install --set image.repository=$(registryServerName)/$(projectName)' # Passando alguns argumrntos     

# ---------------------------------------------------------------------------
#                           Deployment STAGING
# ---------------------------------------------------------------------------

- stage: Staging
  displayName: deploy to staging
  dependsOn: ['Build']
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/staging'))
  jobs:
  - deployment: staging
    variables:
    - group: aks-variable-group-dev
    displayName: deploy to aks staging
    environment: Deploy_Hom
    strategy:
      runOnce:
        deploy:
          steps:   
            # Helm Installer
            - task: HelmInstaller@1
              displayName: 'Install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            # Helm chart pull and export
            - bash: |
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
              displayName: 'Helm Pull and Export'

            # Helm Deploy
            - task: HelmDeploy@0
              displayName: Deploy chart to aks
              inputs:
                connectionType: 'Azure Resource Manager' #Criar um serviço de conexão do tipo Resource Manager
                azureSubscription: 'aks-connection-cluster-prod' # Nome da conexão de serviço criada
                azureResourceGroup: 'rg-br-infra-cluster-prod' # Nome do Resource Group
                kubernetesCluster: 'aks-prod' # Nome do aks
                namespace: '$(k8sNamespace)' # Passando o namespace
                command: 'upgrade' # Ação a ser tomada
                chartType: 'FilePath' 
                chartPath: '$(pipeline.workspace)/install/$(projectName)/' # LOcal para onde o chart foi exportado
                releaseName: '$(projectName)' # Nome da release
                arguments: '--create-namespace --install --set image.repository=$(registryServerName)/$(projectName)' # Passando alguns argumrntos  

# ---------------------------------------------------------------------------
#                           Deployment PRODUCTION
# ---------------------------------------------------------------------------

- stage: Prod
  displayName: deploy to prod
  dependsOn: ['Staging']
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/staging'))
  jobs:
  - deployment: prod
    variables:
    - group: aks-variable-group-dev
    displayName: deploy to aks prod
    environment: Deploy_Prod
    strategy:
      runOnce:
        deploy:
          steps:   
            # Helm Installer
            - task: HelmInstaller@1
              displayName: 'Install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            # Helm chart pull and export
            - bash: |
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
              displayName: 'Helm Pull and Export'

            # Helm Deploy
            - task: HelmDeploy@0
              displayName: Deploy chart to aks
              inputs:
                connectionType: 'Azure Resource Manager' #Criar um serviço de conexão do tipo Resource Manager
                azureSubscription: 'aks-connection-cluster-prod' # Nome da conexão de serviço criada
                azureResourceGroup: 'rg-br-infra-cluster-prod' # Nome do Resource Group
                kubernetesCluster: 'aks-prod' # Nome do aks
                namespace: '$(k8sNamespace)' # Passando o namespace
                command: 'upgrade' # Ação a ser tomada
                chartType: 'FilePath' 
                chartPath: '$(pipeline.workspace)/install/$(projectName)/' # LOcal para onde o chart foi exportado
                releaseName: '$(projectName)' # Nome da release
                arguments: '--create-namespace --install --set image.repository=$(registryServerName)/$(projectName)' # Passando alguns argumrntos  