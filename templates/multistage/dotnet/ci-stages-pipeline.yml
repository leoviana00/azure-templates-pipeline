stages:
- stage: Build 
  displayName: 'Build and Push'
  jobs:
  - job: 'Build'
    steps:
    - checkout: self
    - checkout: helmrepo

    - task: Docker@2
      displayName: dockerLogin
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnectionName)

    - task: Docker@2
      displayName: dockerBuild
      inputs:
        repository: $(imageName)
        command: build
        Dockerfile: $(dockerfile)
        tags: |
          $(imageTag)

    - task: Docker@2
      displayName: dockerPush
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnectionName)
        repository: $(imageName)
        tags: |
          $(imageTag)

    - task: HelmInstaller@1
      displayName: "install helm"
      inputs:
        helmVersionToInstall: $(helmVersion)
    - script: |
        echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
        helm chart save $(helm package --app-version $(imageTag) --version $(helmChartVersion) ./$(chartHelmFile) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName)
        helm chart push $(registryName).azurecr.io/charts/$(projectName):$(helmChartVersion)
        echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: "helm package"

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(helmfrom)
        targetFolder: $(helmto)
        
    - publish: $(build.artifactStagingDirectory)
      artifact: build-artifact

# Deployment API 
- stage: Dev
  displayName: deploy to dev
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: dev
    variables:
    - group: aks-variable-group
    displayName: deploy to aks dev
    environment: development-$(projectName)
    strategy:
      runOnce:
        deploy:
          steps:               
            - task: HelmInstaller@1
              displayName: 'install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            - bash: |
                az login --service-principal -u $(aksSpId) -p '$(aksSpSecret)' --tenant $(aksSpTenantId)
                az aks get-credentials -n $(aks) -g $(rg)
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
                helm upgrade \
                  --namespace $(k8sNamespace) \
                  --create-namespace \
                  --install \
                  --wait \
                  --version $helmChartVersion \
                  --set image.repository=$(registryServerName)/$(projectName) \
                  --set ingress.enabled=false \
                  $(projectName) \
                  $(pipeline.workspace)/install/$(projectName)
              # failOnStderr: true
              displayName: 'deploy helm chart'

- stage: Hom
  displayName: deploy to staging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/staging'))
  jobs:
  - deployment: hom
    variables:
    - group: aks-variable-group
    displayName: deploy to aks hom
    environment: development-$(projectName)
    strategy:
      runOnce:
        deploy:
          steps:               
            - task: HelmInstaller@1
              displayName: 'install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            - bash: |
                az login --service-principal -u $(aksSpId) -p '$(aksSpSecret)' --tenant $(aksSpTenantId)
                az aks get-credentials -n $(aks) -g $(rg)
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
                helm upgrade \
                  --namespace $(k8sNamespace) \
                  --create-namespace \
                  --install \
                  --wait \
                  --version $helmChartVersion \
                  --set image.repository=$(registryServerName)/$(projectName) \
                  --set ingress.enabled=false \
                  $(projectName) \
                  $(pipeline.workspace)/install/$(projectName)
              # failOnStderr: true
              displayName: 'deploy helm chart'

- stage: Prod
  displayName: deploy to prod
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  dependsOn:
    - Dev
    - Hom
  condition: or(succeeded('Dev'), succeeded('Hom'))
  jobs:
  - deployment: prod
    variables:
    - group: aks-variable-group
    displayName: deploy to aks prod
    environment: development-$(projectName)
    strategy:
      runOnce:
        deploy:
          steps:               
            - task: HelmInstaller@1
              displayName: 'install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            - bash: |
                az login --service-principal -u $(aksSpId) -p '$(aksSpSecret)' --tenant $(aksSpTenantId)
                az aks get-credentials -n $(aks) -g $(rg)
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
                helm upgrade \
                  --namespace $(k8sNamespace) \
                  --create-namespace \
                  --install \
                  --wait \
                  --version $helmChartVersion \
                  --set image.repository=$(registryServerName)/$(projectName) \
                  --set ingress.enabled=false \
                  $(projectName) \
                  $(pipeline.workspace)/install/$(projectName)
              # failOnStderr: true
              displayName: 'deploy helm chart'