stages:
# ---------------------------------------------------------------------------
#                           BUILD, TESTE AND PUBLISH
# ---------------------------------------------------------------------------

- stage: BuildTest 
  displayName: 'Build and Test'
  jobs:
  - job: 'BuildTest'

    steps:
    - task: UseDotNet@2
      inputs:
        version: '5.0.x'
        includePreviewVersions: true # Required for preview versions
      displayName: '.Net 5.0.x'

    - task: UseDotNet@2
      inputs:
        version: '3.0.x'
        packageType: runtime
      displayName: '.Net 3.0.x'

    - task: DotNetCoreCLI@2
      inputs:
        command: restore
        projects: '**/*.csproj'
      displayName: 'Restore Nuget Packages'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--no-restore'
      displayName: 'Build projects'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/*.csproj'
        arguments: '--no-restore --no-build'
      displayName: 'Run Tests'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(buildConfiguration) --no-restore'
        zipAfterPublish: True
      displayName: 'Publish $(projectName)'

    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: '$(Build.ArtifactStagingDirectory)' 
    #     artifactName: '$(projectName)-publish'
    #     publishLocation: 'Container'

# ---------------------------------------------------------------------------
#                           BUILD AND PUSH
# ---------------------------------------------------------------------------

- stage: BuildPush 
  displayName: 'Build and Push'
  jobs:
  - job: 'BuildPush'
    steps:
    - checkout: self
    - checkout: helmrepo

    # Build and push with docker
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageName)
        dockerfile: $(dockerfile)
        containerRegistry: $(dockerRegistryServiceConnectionName)
        tags: |
          $(imageTag)

    # Helm installer
    - task: HelmInstaller@1
      displayName: "install helm"
      inputs:
        helmVersionToInstall: $(helmVersion)
    
    # Helm chart save and push
    - script: |
        echo $(registryPassword) | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin
        helm chart save $(helm package --app-version $(imageTag) --version $(helmChartVersion) ./$(chartHelmFile) | grep -o '/.*.tgz') $(registryName).azurecr.io/charts/$(projectName)
        helm chart push $(registryName).azurecr.io/charts/$(projectName):$(helmChartVersion)
        echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: "helm package"

    # Copy files
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(helmfrom)
        targetFolder: $(helmto)

    # Publish artifact    
    - publish: $(build.artifactStagingDirectory)
      artifact: build-artifact

# ---------------------------------------------------------------------------
#                           Deployment DEV
# ---------------------------------------------------------------------------

- stage: Dev
  displayName: deploy to dev
  # Dependência do build com sucesso para rodar
  dependsOn: ['BuildPush']
  # Condição para ser startado
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: dev
    displayName: Deploy to aks dev
    environment: Deploy_Dev
    strategy:
      runOnce:
        deploy:
          steps:   
            # Helm Installer
            - task: HelmInstaller@1
              displayName: 'Install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            # Helm chart pull and export
            - bash: |
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
              displayName: 'Helm Pull and Export'

            # Helm Deploy
            - task: HelmDeploy@0
              displayName: Deploy chart to aks
              inputs:
                connectionType: 'Azure Resource Manager' #Criar um serviço de conexão do tipo Resource Manager
                azureSubscription: 'aks-connection-cluster-prod' # Nome da conexão de serviço criada
                azureResourceGroup: 'rg-br-infra-cluster-prod' # Nome do Resource Group
                kubernetesCluster: 'aks-prod' # Nome do aks
                namespace: '$(k8sNamespace)' # Passando o namespace
                command: 'upgrade' # Ação a ser tomada
                chartType: 'FilePath' 
                chartPath: '$(pipeline.workspace)/install/$(projectName)/' # LOcal para onde o chart foi exportado
                releaseName: '$(projectName)' # Nome da release
                arguments: '--create-namespace --install --set image.repository=$(registryServerName)/$(projectName)' # Passando alguns argumrntos

# ---------------------------------------------------------------------------
#                           Deployment Release
# ---------------------------------------------------------------------------

- stage: Release
  displayName: deploy to staging
  dependsOn: ['BuildPush']
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: staging
    displayName: deploy to aks staging
    environment: Deploy_Hom
    strategy:
      runOnce:
        deploy:
          steps:   
            # Helm Installer
            - task: HelmInstaller@1
              displayName: 'Install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            # Helm chart pull and export
            - bash: |
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
              displayName: 'Helm Pull and Export'

            # Helm Deploy
            - task: HelmDeploy@0
              displayName: Deploy chart to aks
              inputs:
                connectionType: 'Azure Resource Manager' #Criar um serviço de conexão do tipo Resource Manager
                azureSubscription: 'aks-connection-cluster-prod' # Nome da conexão de serviço criada
                azureResourceGroup: 'rg-br-infra-cluster-prod' # Nome do Resource Group
                kubernetesCluster: 'aks-prod' # Nome do aks
                namespace: '$(k8sNamespace)' # Passando o namespace
                command: 'upgrade' # Ação a ser tomada
                chartType: 'FilePath' 
                chartPath: '$(pipeline.workspace)/install/$(projectName)/' # LOcal para onde o chart foi exportado
                releaseName: '$(projectName)' # Nome da release
                arguments: '--create-namespace --install --set image.repository=$(registryServerName)/$(projectName)' # Passando alguns argumrntos 

# ---------------------------------------------------------------------------
#                           Deployment PRODUCTION
# ---------------------------------------------------------------------------

- stage: Prod
  displayName: deploy to prod
  dependsOn: ['Release']
  jobs:
  - deployment: prod
    displayName: deploy to aks prod
    environment: Deploy_Prod
    strategy:
      runOnce:
        deploy:
          steps:   
            # Helm Installer
            - task: HelmInstaller@1
              displayName: 'Install helm'
              inputs:
                helmVersionToInstall: $(helmVersion)

            # Helm chart pull and export
            - bash: |
                echo "$(registryPassword)" | helm registry login $(registryServerName) --username $(registryLogin) --password-stdin
                helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/build-artifact/variables.json -r)
                helm chart pull $(registryServerName)/charts/$(projectName):$helmChartVersion
                helm chart export $(registryServerName)/charts/$(projectName):$helmChartVersion --destination $(pipeline.workspace)/install
              displayName: 'Helm Pull and Export'

            # Helm Deploy
            - task: HelmDeploy@0
              displayName: Deploy chart to aks
              inputs:
                connectionType: 'Azure Resource Manager' #Criar um serviço de conexão do tipo Resource Manager
                azureSubscription: 'aks-connection-cluster-prod' # Nome da conexão de serviço criada
                azureResourceGroup: 'rg-br-infra-cluster-prod' # Nome do Resource Group
                kubernetesCluster: 'aks-prod' # Nome do aks
                namespace: '$(k8sNamespace)' # Passando o namespace
                command: 'upgrade' # Ação a ser tomada
                chartType: 'FilePath' 
                chartPath: '$(pipeline.workspace)/install/$(projectName)/' # LOcal para onde o chart foi exportado
                releaseName: '$(projectName)' # Nome da release
                arguments: '--create-namespace --install --set image.repository=$(registryServerName)/$(projectName)' # Passando alguns argumrntos